# Customise this file, documentation can be found here:
# https://github.com/KrauseFx/fastlane/tree/master/docs
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
# opt_out_usage

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.39.0"

default_platform :ios

platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."

    ENV["GITLAB_API_HTTPARTY_OPTIONS"]="{verify: false}"
  end

  desc "Test: Clone a repo" 
  lane :clone do
    migrate_git_repository(from_repo_url: "git@gitlab.devsub.net:cocoapods/ivbase64.git", to_repo_url: "git@git.innovaptor.at:mexx/test.git")
  end

  desc "Lists all projects that"
  lane :list_projects do
    projects_src = gitlab_get_projects(endpoint: ENV["FL_GITLAB_ENDPOINT_SRC"], api_token: ENV["FL_GITLAB_TOKEN_SRC"]).sort { |a, b| a.path_with_namespace <=> b.path_with_namespace }
    projects_dst = gitlab_get_projects(endpoint: ENV["FL_GITLAB_ENDPOINT_DST"], api_token: ENV["FL_GITLAB_TOKEN_DST"]).sort { |a, b| a.path_with_namespace <=> b.path_with_namespace }

    Helper.log.info "#{projects_src.count} projects Projecst read from the source"
    Helper.log.info "#{projects_dst.count} projects Projecst read from the destination"

    project_paths_dst = projects_dst.map { |p| p.path }

    projects_not_migrated = projects_src.select { |p| !project_paths_dst.include? p.path }
    projects_already_migrated = projects_src.select { |p| project_paths_dst.include? p.path }

    if projects_not_migrated.empty?
      puts "All projects have already been migrated"
    else
      puts "These project are not yet migrated:"
      projects_not_migrated.each do |p| 
        puts "\t⚠️  #{p.path_with_namespace}"
      end
    end

    if projects_already_migrated.empty? 
      puts "No projecst migrated yet"
    else
      puts "These project have already been migrated:"
      projects_already_migrated.each do |p|
        puts "\t✅  #{p.path_with_namespace}"
      end
    end 
  end

  desc "Migrate a specific project"
  lane :migrate do 

  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful
    
    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/KrauseFx/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
